class Node:

    def __init__(self, e):
        self.element = e
        self.next = None
        self.prev = None

class DoublyLinkedListEmpty(Exception):
    pass
        
class DoublyLinkedList:

     def __init__(self):
         self.head = None
         self.tail = None
     
     def is_empty(self):
          """Return True if the Doubly Linked List is empty"""
          
          return self.head is None
     
     def add_left(self, node):
         """Adds a new node IN FRONT OF the head (As a new head)"""
         
         if self.is_empty():
             self.head = node
             self.tail = node
         else:
             self.head.prev = node
             node.next = self.head
             self.head = node
     
     def add_right(self, node):
         """Adds a new node AFTER the tail (As a new tail)"""
         
         if self.is_empty():
             self.head = node
             self.tail = node
         else:
             node.prev = self.tail
             self.tail.next = node
             self.tail = node
     
     def delete_left(self):
          """Deletes the node at the head of a Doubly Linked List"""
               self.head = self.head.next
               self.head.prev = None
     
     def delete_right(self):
          """Deletes the node at the tail of a Doubly Linked List"""
               self.tail = self.tail.prev
               self.tail.next = None
          
     def traverse_left(self):
         """Traverse the Doubly Linked List from left to right and return regular list with all nodes"""
         
         if self.is_empty():
             raise DoublyLinkedListEmpty('Empty!')
         else:
             nodes = []
             current_e = self.head
             while current_e is not None:
                 nodes.append(current_e)
                 current_e = current_e.next
      
      def traverse_right(self):
         """Traverse the Doubly Linked List from right to left and return regular list with all nodes"""
         
         if self.is_empty():
             raise DoublyLinkedListEmpty('Empty!')
         else:
             nodes = []
             current_e = self.tail
             while current_e is not None:
                 nodes.append(current_e)
                 current_e = current_e.prev
     
     def search(self, e):
         """Searches the Singly Linked List for node with element e and returns it if found, otherwise return -1"""
         """Left as an exercise"""
